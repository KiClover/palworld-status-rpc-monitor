// Code generated by goctl. DO NOT EDIT.
// Source: palworldmonitor.proto

package palworldmonitorclient

import (
	"context"

	"github.com/KiClover/palworld-status-rpc-monitor/types/palworldmonitor"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDResp   = palworldmonitor.BaseIDResp
	BaseResp     = palworldmonitor.BaseResp
	BaseUUIDResp = palworldmonitor.BaseUUIDResp
	Empty        = palworldmonitor.Empty
	IDReq        = palworldmonitor.IDReq
	IDsReq       = palworldmonitor.IDsReq
	MonitorInfo  = palworldmonitor.MonitorInfo
	PageInfoReq  = palworldmonitor.PageInfoReq
	UUIDReq      = palworldmonitor.UUIDReq
	UUIDsReq     = palworldmonitor.UUIDsReq

	Palworldmonitor interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		GetMonitorInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitorInfo, error)
	}

	defaultPalworldmonitor struct {
		cli zrpc.Client
	}
)

func NewPalworldmonitor(cli zrpc.Client) Palworldmonitor {
	return &defaultPalworldmonitor{
		cli: cli,
	}
}

func (m *defaultPalworldmonitor) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := palworldmonitor.NewPalworldmonitorClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

func (m *defaultPalworldmonitor) GetMonitorInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitorInfo, error) {
	client := palworldmonitor.NewPalworldmonitorClient(m.cli.Conn())
	return client.GetMonitorInfo(ctx, in, opts...)
}
