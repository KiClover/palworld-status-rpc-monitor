// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: palworldmonitor.proto

package palworldmonitor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Palworldmonitor_InitDatabase_FullMethodName   = "/palworldmonitor.Palworldmonitor/initDatabase"
	Palworldmonitor_GetMonitorInfo_FullMethodName = "/palworldmonitor.Palworldmonitor/getMonitorInfo"
)

// PalworldmonitorClient is the client API for Palworldmonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PalworldmonitorClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// group: monitor
	GetMonitorInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitorInfo, error)
}

type palworldmonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewPalworldmonitorClient(cc grpc.ClientConnInterface) PalworldmonitorClient {
	return &palworldmonitorClient{cc}
}

func (c *palworldmonitorClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Palworldmonitor_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palworldmonitorClient) GetMonitorInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitorInfo, error) {
	out := new(MonitorInfo)
	err := c.cc.Invoke(ctx, Palworldmonitor_GetMonitorInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PalworldmonitorServer is the server API for Palworldmonitor service.
// All implementations must embed UnimplementedPalworldmonitorServer
// for forward compatibility
type PalworldmonitorServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// group: monitor
	GetMonitorInfo(context.Context, *Empty) (*MonitorInfo, error)
	mustEmbedUnimplementedPalworldmonitorServer()
}

// UnimplementedPalworldmonitorServer must be embedded to have forward compatible implementations.
type UnimplementedPalworldmonitorServer struct {
}

func (UnimplementedPalworldmonitorServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedPalworldmonitorServer) GetMonitorInfo(context.Context, *Empty) (*MonitorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorInfo not implemented")
}
func (UnimplementedPalworldmonitorServer) mustEmbedUnimplementedPalworldmonitorServer() {}

// UnsafePalworldmonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PalworldmonitorServer will
// result in compilation errors.
type UnsafePalworldmonitorServer interface {
	mustEmbedUnimplementedPalworldmonitorServer()
}

func RegisterPalworldmonitorServer(s grpc.ServiceRegistrar, srv PalworldmonitorServer) {
	s.RegisterService(&Palworldmonitor_ServiceDesc, srv)
}

func _Palworldmonitor_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalworldmonitorServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palworldmonitor_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalworldmonitorServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palworldmonitor_GetMonitorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalworldmonitorServer).GetMonitorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palworldmonitor_GetMonitorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalworldmonitorServer).GetMonitorInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Palworldmonitor_ServiceDesc is the grpc.ServiceDesc for Palworldmonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Palworldmonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palworldmonitor.Palworldmonitor",
	HandlerType: (*PalworldmonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Palworldmonitor_InitDatabase_Handler,
		},
		{
			MethodName: "getMonitorInfo",
			Handler:    _Palworldmonitor_GetMonitorInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "palworldmonitor.proto",
}
